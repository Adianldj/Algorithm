package Practice2;



import java.util.Arrays;
import java.util.PriorityQueue;

public class MergeKSorted {
	public int[] merge(int[][] arrayOfArrays){
		if(arrayOfArrays == null){
			return null;
		}
		if( arrayOfArrays.length == 0 || arrayOfArrays[0].length == 0){
			return new int[0];
		}
		int k = arrayOfArrays.length;
		PriorityQueue<element> minHeap = new PriorityQueue<element>(k);
		int length = 0;
		for(int i = 0 ; i < arrayOfArrays.length ; i++){
			length = length + arrayOfArrays[i].length;
			minHeap.offer(new element(i , 0 , arrayOfArrays[i][0]));
		}
		int[] result = new int[length];
		int index = 0;
		while(!minHeap.isEmpty()){
			element e = minHeap.poll();
			result[index] = e.value;
			index++;
			if(e.y + 1 < arrayOfArrays[0].length){
				minHeap.offer(new element(e.x , e.y + 1 , arrayOfArrays[e.x][e.y + 1]));
			}
		}
		return result;
		
	}
	static class element{
		int x;
		int y;
		int value;
		public element(int x, int y , int value){
			this.x = x;
			this.y = y;
			this.value = value;
		}
	}
	public static void main(String[] args) {
		MergeKSorted solution = new MergeKSorted();
		int[] result;
		int[][] arrayOfArrays = new int[][] {{ 0, 1, 2, 4 } ,  {5, 6 , 7 , 8 }};
		result = solution.merge(arrayOfArrays);
		System.out.println(Arrays.toString(result));

		

	}
}
